#include <stdio.h>
#include <stdlib.h>

#define SIZE 8 // 8byte == 64bit 64비트 크기 
#define ENCRYPTION 1
#define DECRYPTION 0
 
 /*키 생성 전치 표 (PC-1, PC-2)*/
 unsigned char PC_1[56] = { //(SIZE-1)*8
	57 , 49 , 41 , 33 , 25 , 17 , 9 ,  1 ,
	58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 ,
	59 , 51 , 43 , 35 , 27 , 19 , 11 , 3 ,
	60 , 52 , 44 , 36 , 63 , 55 , 47 , 39 ,
	31 , 23 , 15 , 7 , 62 , 54 , 46 , 38 ,
	30 , 22 , 14 , 6 , 61 , 53 , 45 , 37 ,
	29 , 21 , 13 , 5 , 28 , 20 , 12 , 4
}; 

unsigned char PC_2[48] = { //(SIZE-2)*8
	14 , 17 , 11 , 24 , 1 , 5 , 3 , 28 ,
	15 , 6 , 21 , 10 , 23 , 19 , 12 , 4 ,
	26 , 8 , 16 , 7 , 27 , 20 , 13 , 2 ,
	41 , 52 , 31 , 37 , 47 , 55 , 30 , 40 ,
	51 , 45 , 33 , 48 , 44 , 49 , 39 , 56 ,
	34 , 53 , 46 , 42 , 50 , 36 , 29 , 32
};

/*로데이션 테이블*/ 
unsigned char Round_Shift[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };

/*평문 전치표 IP, IP^-1*/
unsigned char IP[64] = { //SIZE*8 
	58, 50, 42, 34, 26 ,18 ,10, 2,
	60, 52, 44, 36, 28, 20, 12, 4,
	62, 54, 46, 38, 30, 22, 14, 6,
	64, 56, 48, 40, 32, 24, 16, 8,
	57, 49, 41, 33, 25, 17, 9, 1,
	59, 51, 43, 35, 27, 19, 11, 3,
	61, 53, 45, 37, 29, 21, 13, 5,
	63, 55, 47, 39, 31, 23, 15, 7
};

unsigned char IP_inverse[64] = { //SIZE*8
	40, 8, 48, 16, 56, 24, 64, 32,
	39, 7, 47, 15, 55, 23, 63, 31,
	38, 6, 46, 14, 54, 22, 62, 30,
	37, 5, 45, 13, 53, 21, 61, 29,
	36, 4, 44, 12, 52, 20, 60, 28,
	35, 3, 43, 11, 51, 19, 59, 27,
	34, 2, 42, 10, 50, 18, 58, 26,
	33, 1, 41, 9, 49, 17, 57, 25
};

/*확산 전치표 E, 평행 전치표*/

unsigned char E[48] = { //SIZE*6
	32, 1, 2, 3, 4, 5,
	4, 5, 6, 7, 8, 9,
	8, 9, 10, 11, 12, 13,
	12, 13, 14, 15, 16, 17,
	16, 17, 18, 19, 20, 21,
	20, 21, 22, 23, 24, 25,
	24, 25, 26, 27, 28, 29,
	28, 29, 30, 31, 32, 1
};

unsigned char P[32] = { //SIZE*4
	16, 7, 20, 21, 29, 12, 28, 17,
	1, 15, 23, 26, 5, 18, 31, 10,
	2, 8, 24, 14, 32, 27, 3, 9,
	19, 13, 30, 6, 22, 11, 4, 25
};

/*S BOX 표*/
unsigned char S_BOX[8][4][16] = {
	{//S1
		{ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
		{ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
		{ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
		{ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 2, 14, 10, 0, 6, 13 }
	},{//S2
		{ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
		{ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
		{ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
		{ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }
	},{//S3
		{ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
		{ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
		{ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
		{ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }
	},{//S4
		{ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
		{ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
		{ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
		{ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }
	},{//S5
		{ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
		{ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
		{ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
		{ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }
	},{//S6
		{ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
		{ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
		{ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },	
		{ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }
	},{//S7
		{ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
		{ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
		{ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
		{ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }
	},{//S8
		{ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
		{ 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
		{ 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
		{ 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
	}
};

int LS =1; // Lotation


void binarytochar(int *c,char *r);
void DES(char* , char* ,char*,int);
void input_word(char* ,char*);
void chartobinary(int* , char * );
void print_binary(int *, int size);
void keygen(int*,int *);
void printf_binary(int *, int *, int);
void permutation(int *, int *,unsigned char*);
void F(int *,int *,int *,int des_state);
int chartonum(int *,int);
void print_char(char *c,int size);


int main() {
  char key[SIZE+1]; //64bit 키를 받는다. 
  char plaintext[SIZE+1];//64bit  평문을 저장한다. 
  char encrypted_str[SIZE], decryption_str[SIZE]; //결과 저장 

  input_word(plaintext, key); 
	
	DES(plaintext, key, encrypted_str ,ENCRYPTION); // (암호화할 평문, 암호화 키, 평문)
		
	printf("%s\n",key); 
	printf("%s\n",encrypted_str); 
	
	DES(encrypted_str, key, decryption_str, DECRYPTION);
	system("pause");
	return 0;
}
void DES(char* plaintext, char* key, char * result,int des_type){
	
	int binary_plaintext [SIZE*8]; // 이진 평문
	int binary_key[SIZE*8];// 이진 키 
	int binary_str[SIZE*8]; // 이진 암호문 
	int real_key[(SIZE-2)*8]; // 48비트 사용할 실제  키
	
	printf("====== \n");
	if(des_type) {
		printf("암호화 작업 \n");
	}
	else {
		printf("복호화 작업 \n");
	}
	
	
	printf("[출력] 입력한 평문의 이진 변환\n");
	chartobinary(binary_plaintext,plaintext); 
	print_binary(binary_plaintext,8);
	printf("변환 완료\n\n");
	
	printf("[출력]입력한 키의 이진 변환\n");
	chartobinary(binary_key,key); 
	print_binary(binary_key,8);
	printf("변환 완료\n\n");
	
	printf("[출력]생성한 키의 이진 출력\n");
	keygen(real_key, binary_key);
	print_binary(real_key,6);
	printf("변환 완료\n\n");
	
	printf("[출력] 입력한 평문의 초기 전치 실행 \n");
	permutation(binary_str, binary_plaintext,IP);
	print_binary(binary_str, 8);
	printf("변환 완료\n\n");
	
	printf("[출력] f함수적용평문의2진변환\n");
	F(binary_str,binary_str, real_key,des_type);
	print_binary(binary_str,8);  
	printf("변환 완료\n\n");
    
    printf("[출력] FP 전치 최종 적용 암호문 2진 변환 \n");
	permutation(binary_plaintext, binary_str,IP_inverse);
	print_binary(binary_plaintext, 8);
	printf("변환 완료\n\n");
	
	printf("[출력] 최종 암호문\n");
	binarytochar(binary_plaintext,result);
	printf("\n");
   print_char(result,8);
    printf("변환 완료\n\n");

} 
void chartobinary(int*b, char * c){ // 문자열을 이진문자열로 변환시키는 함수 
	int i,j=0;
	int bit;
	
	for (i=0; i<SIZE; i++) { //size 8 자리 평문을 넣어서.. 
		bit =128;// 1000000 char의 최고값 
		for (j=0; j<8; j++) { //char은 8bit
		  
			if((c[i] & bit) == bit) // c[i] & 10000000 
			b[(i*8)+j] = 1;
			else{
			b[(i*8)+j] = 0; 
			}  
			
			bit >>= 1;
		}
	}
}

void keygen(int * r,int *b){
	int tempkey[(SIZE-1)*8]; // 56비트 변환 키
	int leftkey[((SIZE-1)*4)+1]; // 변환키 분리한 28비트 왼쪽키 마지막은 로테이션때 백업해 두는 용도 이다. 
	int rightkey[((SIZE-1)*4)+1];// 변환키 분리한 28비트 오른쪽 키
	
	int i,j;
	
	for(i=0; i<(SIZE-1)*8; i++){ //입력받은 키를 PC_1에 따라 축약 전치 해서 56bit 키를 만든다. 
		tempkey[i] = b[PC_1[i]-1];
	} 
	 
	for (i=0; i<(SIZE-1)*4; i++){ // 키를 왼쪽 28비트로 만든다.
	 leftkey[i] =tempkey[i]; 
	 rightkey[i] = tempkey[(SIZE-2)*4+i];
	}
	
	/*16번을 돌린다면, LS에 몇번째 키인지 카운트 하고, 지금의 LS자리에 ROUND[LS]가 들어가야 합니다.*/
	for(i=0; i<LS; i++) {// 오른쪽 왼쪽 키 로테이션 ** 한번만 실행 한다. 실제로는 16번.. 
	leftkey[((SIZE-1)*4)] = leftkey[0];
	rightkey[((SIZE-1)*4)] = rightkey[0];
	for(j=0; j<(SIZE-1)*4; j++){
		leftkey[j] = leftkey[j+1];
		rightkey[j] = rightkey[j+1];
	}
	
	//이제 분리한 키를 다시 병합한다. 
	for (i=0; i<((SIZE-1)*4); i++) {
		tempkey[i] = leftkey[i];
		tempkey[i+((SIZE-1)*4)] = rightkey[i];
	}
	
	//이제 pc_2에 따라 축약 전치를 실행한다. 
	for (i=0; i<((SIZE-2)*8); i++) {
		r[i] = tempkey[PC_2[i]-1];
	} 
}
}
void binarytochar(int *c,char *r){  // 이진문자열을문자열로변환하여출력

         int i=0,j=0,k=0,temp=0,count=0;

 

         for(i=0;i<8;i++){  // 문자열넣을저장소초기화

                  r[i]=0;

         }

 

         for(i=0;i<8;i++){

                  count=8; 

                  for(j=0;j<8;j++){

                           count--;

                           if(c[(i*8)+j]== 1){

                                   temp=1;

                                   for(k=0;k<count;k++)

                                            temp *=2;

                                   r[i] +=temp;  // 비트추가

                           }

                  }

         }

}

 
	
void F(int *c,int *t,int *k,int des_type){

 	int lefttext[((SIZE)*4)];  // 평문분리한32비트임시평문
	int righttext[((SIZE)*4)];  // 평문분리한32비트임시평문

 	int temptext[((SIZE)*6)];  // 확대전치적용시사용할48비트임시평문
 	
	int temptext2[((SIZE)*4)];  // f함수적용시사용할32비트임시평문
	int temptext3[((SIZE)*4)];  // f함수적용시사용할32비트임시평문

	int i,j, tempnum,bit,a,count=0;

	int row[2], column[4];  // S_box 연산시사용할행과열값저장소

 	if(des_type == ENCRYPTION){
		for(i=0;i<(SIZE)*4;i++){
			lefttext[i]=t[i];
			righttext[i]=t[i+((SIZE)*4)];
                  }
         }else{
			for(i=0;i<(SIZE)*4;i++){
				lefttext[i]=t[i+((SIZE)*4)];
				righttext[i]=t[i];
			}
         }
         // 평문반으로분리
         // 암호화일경우그대로, 복호화일경우반대로분리

         {                 ///// f 함수진입
		for(i=0;i<(SIZE)*6;i++){   // 평문righttext의비트값을확대전치(48 bit)                  
			temptext[i] = righttext[E[i]-1];
			}

        for(i=0;i<(SIZE)*6;i++){  
            temptext[i] = temptext[i]^k[i];  // 키와평문을XOR 연산
            }
                 
		for(i=0;i<8;i++){  // S_box 연산
            row[1] = temptext[(i*6)];  // S_box 표의행값저장(b1,b6)
            row[0] = temptext[(i*6)+5];

            a=3;
                
		for(j=0;j<4;j++){
            column[a--] = temptext[(i*6)+j+1];  // S_box 표의열값저장(b2~b5)
        }
    tempnum = S_BOX[i][chartonum(row,2)][chartonum(column,4)]; 
	// S_box에서가져온수임시저장
        
		bit=8;  // 1000
         for(j=0;j<4;j++){  // 숫자를비트열로변환
            temptext2[count++] = (tempnum&bit) == bit ? 1 : 0;
        	bit = bit >> 1;
             }
        }               
    for(i=0;i<(SIZE)*4;i++){  // 평문temptext2의비트값을표P에따라전치(32 bit)                       
        temptext3[i] = temptext2[P[i]-1]; 
        }
                  
    for(i=0;i<(SIZE)*4;i++){                            
        lefttext[i] = lefttext[i]^temptext3[i];
        // 왼쪽평문과f함수출력값을XOR 연산
        }
    }
         if(des_type == ENCRYPTION){
            for(i=0;i<(SIZE*4);i++){
                c[i+(SIZE*4)]=lefttext[i];
                c[i]=righttext[i];                         
            }       
         }else{
            for(i=0;i<(SIZE)*4;i++){
                c[i]=lefttext[i];
                c[i+((SIZE)*4)]=righttext[i];                       
         	}       
         }
         // 분리한키병합
         // 암호화일경우그대로, 복호화일경우반대로병합
}

 
int chartonum(int *c,int size){  // 이진문자열을숫자로
         int i=0,j=0, num=0,num2=0;
         for(i=0;i<size;i++){
                if(c[i]==1){
                    num2=1;
                for(j=0;j<i;j++){  
                      num2 = num2*2;
                }
        num += num2;
          }
     }
    return num;
}

void print_char(char *c,int size){

         int i=0;

         for(i=0;i<size;i++){

                  printf("%c ",c[i]);

         }

         printf("\n");

}

//평문의 비트 값을 전치 시켜요!! 
void permutation(int * str, int *p, unsigned char * ip){
	int i=0;
	
	for (i=0; i<((SIZE)*8); i++){
		str[i] = p[ip[i]-1]; //평문의 비트값을 전치 시킨다. 
	}
}

void print_binary(int * c, int size){ //SIZE 입력한 폄문의 문자수, size는 char의 8bit , 6비트 변환, 4비트,, 
	int i=0; 
	
	for(i=0; i<(SIZE*size); i++){
		printf("%d",c[i]);
		if(i %8 ==7) {printf(" ");}
	    if(i%32 == 31) { printf("\n");}
	}
	//printf("\n");
}

void input_word(char* p,char* k){
    printf("---\n");
    printf("[입력] 암호화 하려는 평문 (64bit) : ");
    scanf("%s",p);
    printf("[입력] 암호화시 이용하는 키  (64bit) : ");
    scanf("%s",k);
}



