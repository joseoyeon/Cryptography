#include<stdio.h>
#include<stdlib.h>
#include<string.h>

unsigned long long KEY; //8
unsigned int C,D =0 ; //4

 void print_binary(char *t) {
	int j,i;
	int bit;// 1000 0000
	
	for(i=0; i < strlen(t); i++){
	  bit=128;
		 for(j=0; j<8; j++){ //한 글자당 8비트로 나타낸다. 
	    	printf("%d",t[i] & bit ? 1:0);
	 		bit >>= 1;
		 }
	 	
	printf(" ");
	if(i % 8 == 7) printf("\n");
	}
	printf("\n\n");
}

//순서대로 정 렬 
void print(unsigned long long *t,int size) {
	int i,j=0;
	unsigned long long p =(1LL<<63), res=0LL;
	unsigned long long tmp =1LL;
	
	for(i = 0; i < size ; i++){
	for(j= i*8+7; j>= i*8; j--){
	printf("%d",(*t & (tmp<<j))?1 :0 );
}
printf (" ");
if (i%8 ==7)printf("\n");
}
printf("\n\n");

}
//print 만 해주는거 
void print_P_binary(unsigned long long *t, int size) {
	int i;
	unsigned long long tmp =1LL;
		for (i=size*8-1; i>=0; i--) {
		printf("%d",*t & ((tmp << i) )? 1:0); 
	
	if(i%64==0)printf("\n");
	if(i%8 == 0){printf(" ");}
	}
	printf("\n\n");
}

unsigned long long PC_1(char* source){
	unsigned long long tmp=(1LL<<63), resrc=0LL;
	int i=0;
	static char perm[] = { 56,48,40,32,24,16, 8, 0,57,49,41,33,25,17,
  						  9, 1,58,50,42,34,26,18,10, 2,59,51,43,35,
                         62,54,46,38,30,22,14, 6,61,53,45,37,29,21,
						 13, 5,60,52,44,36,28,20,12, 4,27,19,11, 3 };
	
	for(i=0; i<56; i++, tmp >>=1LL ) {
		if(*(unsigned long long *)source & (1LL<<(63-perm[i]))){resrc |= tmp;} //7
	}
	
	return resrc;
}

unsigned long long IP(unsigned long long source){
int i=0;
	unsigned long long tmp =1LL,resrc=0LL; 
	
	static char perm[]=  {58, 50, 42, 34, 26 ,18 ,10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
						  62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
						  57, 49, 41, 33, 25, 17,  9, 1,59, 51, 43, 35, 27, 19, 11, 3,
						  61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7}; 
                       
	for (i=0; i<64; i++, tmp <<=1LL){
		if(source & 1LL << (perm[i]-1)) //8
			resrc |= tmp ;
	}	
	return  resrc;// 전치 
}


unsigned long long FP(unsigned long long source){
	int i=0; 
	unsigned long long tmp=1LL, resrc=0LL;
	static char perm[] ={ 39, 7,47,15,55,23,63,31,38, 6,46,14,54,22,62,30,
                         37, 5,45,13,53,21,61,29,36, 4,44,12,52,20,60,28,
                         35, 3,43,11,51,19,59,27,34, 2,42,10,50,18,58,26,
                         33, 1,41, 9,49,17,57,25,32, 0,40, 8,48,16,56,24 };
	for (i=0; i<64; i++, tmp<<=1LL){//8
		if(source & 1LL<<perm[i]) {
			resrc |= tmp;
		}
	}
	return resrc;
} 

unsigned int rotation(unsigned int source, int c, int f)
{
  static char rotation_sheet[] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

  c = rotation_sheet[c];
  
  if (f) while(c-- > 0) source = (source >> 1) | ((source & 1) << 27); //복호화 마지막 비트를 맨 앞으로 
  else   while(c-- > 0) source = ((source << 1) & 0x0FFFFFFF) | (source >> 27); // 암호화 
  return source;
}

unsigned long long PC_2() {//56BIT
	static char perm[] = { 13,16,10,23, 0, 4, 2,27,14, 5,20, 9,22,18,11, 3,
                         25, 7,15, 6,26,19,12, 1,40,51,30,36,46,54,29,39,
                         50,44,32,47,43,48,38,55,33,52,45,41,49,35,28,31 };	
    int i=0;
    unsigned long long tmp=(1LL<<47), rkey=0LL;
    
    for (i=0; i<48; i++, tmp>>=1LL) {
    	if(KEY & (1LL<<(55-perm[i]))){rkey |= tmp;}//6
	}
	//printf("[PC_2] : ");
	//print_P_binary(&rkey,8); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 

	return rkey;
} 

unsigned long long EX(unsigned int source){//32bit
 char i;
  unsigned long long tmp = 1LL, res = 0LL;
  static char perm[] = { 31, 0, 1, 2, 3, 4, 3,
  						  4, 5, 6, 7, 8, 7, 8,
						  9,10,11,12,11,12,13,
						  14,15,16,15,16,17,18,
						  19,20,19,20,21,22,23,
						  24,23,24,25,26,27,28,
						  27,28,29,30,31, 0 };
//	printf("[R] : ");
//	print_P_binary((unsigned long long*)&source,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
	
  for(i = 0; i < 48; i++, tmp = tmp << 1LL) if (source & (1 << perm[i])) res |= tmp;
  
//	printf("[EX] : ");
//	print_P_binary((unsigned long long*)&res,8); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
	
	return res;
}

unsigned int S (unsigned long long source){
	static char perm[8][64] =  { { 14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7,
                                 0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8,
                                 4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0,
                                15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13 },
                              { 15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10,
                                 3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5,
                                 0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15,
                                13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9 },
                              { 10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8,
                                13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1,
                                13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7,
                                 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12 },
                              {  7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15,
                                13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9,
                                10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4,
                                 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14 },
                              {  2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9,
                                14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6,
                                 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14,
                                11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3 },
                              { 12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11,
                                10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8,
                                 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6,
                                 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13 },
                              {  4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1,
                                13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6,
                                 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2,
                                 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12 },
                              { 13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7,
                                 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2,
                                 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8,
                                 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11 } };
                                 
    int i=0;
    unsigned int r=0; //저장 
	unsigned int resrc=0;
	
//	printf("[source] : ");
//	print_P_binary(&source,6);
	
	for (i=0; i<8; i++){
		r = ((source >> ((7-i)*6)) & 0x3F); 
	
		//printf("%d\n",perm[i][((r&0x20)|((r<<4)&0x10)|(r>>1)&0x0F)]);
	
		resrc |= perm[i][((r&0x20)|((r<<4)&0x10)|(r>>1)&0x0F)];
	 if (i!=7)	resrc <<=4; // 10 0000 |  01 0000 | 00 1111 16 진수들, 자릿수에 맞게 쉬프트 연산을 한다. 4bit 씩 앞으로 넣는다. 
	}       
	
//	printf("[S] : ");
//	print_P_binary((unsigned long long *)&resrc,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
	        
	return resrc; 
}

unsigned int P (unsigned int source){
	
//	printf("[source] : ");
//	print_P_binary((unsigned long long*)&source,4);
	
	int i;
	unsigned int tmp=(1<<31), resrc=0;
	static char perm[]=  {16, 7,20,21,
	 29,12,28,17,
	  1,15,23,26,
	  5,18,31,10,
	  2, 8,24,14,
	  32,27, 3, 9,
	  19,13,30, 6,
	  22,11, 4,25};

// 확대전치표E, 평행전치표P
for(i=0; i<32; i++, tmp >>=1){
		if(source & (1<< (32-perm[i]))){resrc |= tmp;}
}
	//printf("[P] : ");
	//print_P_binary((unsigned long long *)&resrc,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 

	return resrc;
}

unsigned long long EN(unsigned long long source) {
	unsigned int L,R,Ln;
	int i=0;
	
//	print_long_binary(&source, 8);
//	print_P_binary(&source,8);
	
	source = IP(source);

//	printf("[IP 후] :");
//	print_P_binary(&source,8);
	
    R = *((unsigned int *)&source);
	L = *(((unsigned int *)&source)+ 1);
	
//	printf("[L] : ");
//	print_P_binary((unsigned long long*)&L,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
//	printf("[R] : ");
//	print_P_binary((unsigned long long*)&R,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
	
	for (int i=0; i<16; i++)
	{
	//F함수 구현
	Ln = R;
	
	C= *((unsigned int *)(&KEY)+1);
	C>>=4;
	C<<=4;
	
	KEY >>= 4;
	D = *((unsigned int *)&(KEY));
	D>>=4;
	
//	printf("[C] : ");
//	print_P_binary((unsigned long long*)&C,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
//	printf("[D] : ");
//	print_P_binary((unsigned long long*)&D,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 
	
	C = rotation(C,i,0);
	D = rotation(D,i,0); 
	
//	printf("[ROTATION C] : ");
//	print_P_binary((unsigned long long*)&C,4); //28비트가 들어가8야 하지만 32비트로, 마지막은 0처리 해주었다. 
//	printf("[ROTATION D] : ");
//	print_P_binary((unsigned long long*)&D,4); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 

	KEY = ((unsigned long long)C <<32 | (unsigned long long)D<<8);
	KEY >>=8;
//	printf("[ROTATION KEY] : ");
//	print_P_binary(&KEY,8); //28비트가 들어가야 하지만 32비트로, 마지막은 0처리 해주었다. 

	
	R = L^(P(S(EX(R)^PC_2())));
	
//	printf("[R 저장] : ");
//	print_P_binary((unsigned long long*)&R,4);
	
	L = Ln;
	
	}
	
	source = FP(((unsigned long long)L<<32) | (R)); 
return source;	
}

unsigned long long DE(unsigned long long source) {
	unsigned int L,R,Ln;
	int i=0;
	
	source = IP(source);

	L = *((unsigned int *)&source);
	R = *(((unsigned int *)&source)+ 1);
	
	for (int i=15; i>=0; i--)
	{
	//F함수 구현
	
	Ln = R;
	R = L^(P(S(EX(R)^PC_2())));
	L = Ln;
	
	C = rotation(C,i,1);
	D = rotation(D,i,1); 
	KEY = C <<28| D;
}
	
	source = FP(((unsigned long long)L<<32) | (R)); 
return source;	
}
void des_encryption(char *str, char * key, char *encryption_str){
	int i;
	int r = strlen(str); 
	
//	printf("[KEY] : ");
//	print_long_binary((unsigned long long*)key, 7);
//	print_P_binary((unsigned long long*)key,7);
	
	//키 생성	
	KEY = PC_1(key);
	 
//	printf("[PC_1] : ");
//	print_P_binary(&KEY,8);
	 
	for (i=0; i<r; i +=8){
		*(unsigned long long*)(encryption_str+i) = EN(*(unsigned long long*)(str+i));
	}
	encryption_str[r] =0;
	return ;
}

void des_decryption(char *str, char * key, char *decryption_str){
	int i;
	int r = strlen(str); 
	
	//키 생성
//	KEY = PC_1(key); 
	
	for (i=0; i<r; i +=8){
		*(unsigned long long*)(decryption_str+i) = DE(*(unsigned long long*)(str+i));
	}
	decryption_str[r] =0;
	return ;
}

/*암호화 복호화 알고리즘*/
int main(){
  char source_str[] = "blackout";
	char source_key[] = "goodlife";
	char encryption_str[256], decryption_str[256]; 
	
	printf("[평문] : %s\n",source_str);
	print_binary(source_str);
	print((unsigned long long *)&source_str,8);
	
	des_encryption(source_str, source_key, encryption_str);
	printf("[암호문] : %s\n",  encryption_str);
	print_binary(encryption_str);
	
	des_decryption(encryption_str, source_key,decryption_str);
	printf("[복호문] : %s\n",  decryption_str);
	print_binary( decryption_str);
	
	system("pause");
	return 0;
}
